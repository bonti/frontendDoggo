{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\PIONEER\\\\Documents\\\\projects\\\\endurance-sample\\\\srabonti-sample-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\PIONEER\\\\Documents\\\\projects\\\\endurance-sample\\\\srabonti-sample-ui\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport * as types from './actionTypes';\nimport apiConfigInfo from '../api/apiConfig';\nimport * as actionHelper from '../utility/actionHelper';\n\nrequire('isomorphic-fetch');\n\nexport function authenticationSuccess(userInfo) {\n  return {\n    type: types.AUTHENTICATE_SUCCESS,\n    userInfo: userInfo\n  };\n}\nexport function authenticationFailure(userFailure) {\n  return {\n    type: types.AUTHENTICATE_FAILURE,\n    userFailure: userFailure\n  };\n} //thunk\n\nexport function authenticateAndFetchUserInfo(userInfo) {\n  var requestBody = {\n    userName: userInfo.userName,\n    password: userInfo.password\n  };\n  var loginURL = \"\".concat(apiConfigInfo.url, \"Login/\");\n  var options = actionHelper.getDataApiOptionsNotAuthenticated({\n    method: \"POST\"\n  }, requestBody);\n  return fetchAndDispatch(loginURL, options, userInfo.clientName);\n}\n\nvar fetchData = function fetchData(url, options) {\n  var fetchRequest = new Request(url, options);\n  return fetch(fetchRequest).then(function (response) {\n    return response.json().then(function (result) {\n      return {\n        result: result\n      };\n    });\n  }).catch(function (error) {\n    return {\n      error: error\n    };\n  });\n};\n\nvar fetchAndDispatch = function fetchAndDispatch(loginURL, options, clientName) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var userInfo, responseData, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              userInfo = undefined;\n              _context.prev = 1;\n              _context.next = 4;\n              return fetchData(loginURL, options);\n\n            case 4:\n              responseData = _context.sent;\n\n              if (responseData.errorMessage === undefined) {\n                response = responseData.result;\n\n                if (response.responseStatus) {\n                  if (response.responseData && response.responseData.length > 0 && response.responseData[0]) {\n                    userInfo = response.responseData[0];\n                  } else {\n                    userInfo = response;\n                  }\n                } else {\n                  userInfo = response;\n                }\n\n                dispatch(authenticationSuccess(userInfo));\n              } else {\n                dispatch(authenticationFailure(responseData.result));\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              dispatch(authenticationFailure(_context.t0));\n\n            case 11:\n              return _context.abrupt(\"return\", Promise.resolve(userInfo));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/PIONEER/Documents/projects/endurance-sample/srabonti-sample-ui/src/actions/authenticationActions.js"],"names":["types","apiConfigInfo","actionHelper","require","authenticationSuccess","userInfo","type","AUTHENTICATE_SUCCESS","authenticationFailure","userFailure","AUTHENTICATE_FAILURE","authenticateAndFetchUserInfo","requestBody","userName","password","loginURL","url","options","getDataApiOptionsNotAuthenticated","method","fetchAndDispatch","clientName","fetchData","fetchRequest","Request","fetch","then","response","json","result","catch","error","dispatch","undefined","responseData","errorMessage","responseStatus","length","Promise","resolve"],"mappings":"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","sourcesContent":["import * as types from './actionTypes';\nimport apiConfigInfo from '../api/apiConfig'; \nimport * as actionHelper from '../utility/actionHelper'; \n\nrequire('isomorphic-fetch');\n\nexport function authenticationSuccess(userInfo) {\n  return { type: types.AUTHENTICATE_SUCCESS, userInfo };\n}\n\nexport function authenticationFailure(userFailure) {\n  return { type: types.AUTHENTICATE_FAILURE, userFailure }\n}\n \n//thunk\nexport function authenticateAndFetchUserInfo(userInfo) {\n  let requestBody = {\n    userName: userInfo.userName,\n    password: userInfo.password,\n  };\n  const loginURL = `${apiConfigInfo.url}Login/`;\n  let options = actionHelper.getDataApiOptionsNotAuthenticated({ method: \"POST\" }, requestBody);\n  return fetchAndDispatch(loginURL, options, userInfo.clientName);\n}\n\n\nconst fetchData = (url, options) => {\n  const fetchRequest = new Request(url, options);\n  return fetch(fetchRequest)\n    .then(response => response.json().then(result => ({ result })))\n    .catch(error => ({ error }));\n};\n\nconst fetchAndDispatch = (loginURL, options, clientName) =>{\n  return async (dispatch) => {\n    let userInfo = undefined;\n     try {\n       const responseData = await fetchData(loginURL, options);\n       if (responseData.errorMessage === undefined) {\n         let response = responseData.result;\n         if(response.responseStatus){\n           if(response.responseData && response.responseData.length > 0 && response.responseData[0]){\n             userInfo = response.responseData[0];\n           }else{\n             userInfo = response;\n           }\n         }else{\n           userInfo = response;\n         }\n         dispatch(authenticationSuccess(userInfo)); \n       } else {\n         dispatch(authenticationFailure(responseData.result))\n       }\n     }\n     catch (err) {\n       dispatch(authenticationFailure(err))\n     }\n   return Promise.resolve(userInfo);\n   };\n}\n\n"]},"metadata":{},"sourceType":"module"}