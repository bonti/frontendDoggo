{"ast":null,"code":"import * as types from './actionTypes';\nimport apiConfigInfo from '../api/apiConfig';\nimport * as actionHelper from '../utility/actionHelper';\n\nrequire('isomorphic-fetch');\n\nexport function authenticationSuccess(userInfo) {\n  return {\n    type: types.AUTHENTICATE_SUCCESS,\n    userInfo: userInfo\n  };\n}\nexport function authenticationFailure(userFailure) {\n  return {\n    type: types.AUTHENTICATE_FAILURE,\n    userFailure: userFailure\n  };\n} //thunk\n\nexport function authenticateAndFetchUserInfo(userInfo) {\n  var requestBody = {\n    userName: userInfo.userName,\n    password: userInfo.password\n  };\n  var loginURL = \"\".concat(apiConfigInfo.url, \"Login/\");\n  var options = actionHelper.getDataApiOptionsNotAuthenticated({\n    method: \"POST\",\n    clientName: userInfo.clientName\n  }, requestBody);\n  return fetchAndDispatch(loginURL, options, userInfo.clientName);\n}","map":{"version":3,"sources":["C:/Users/PIONEER/Documents/projects/endurance-sample/srabonti-sample-ui/src/actions/authenticationActions.js"],"names":["types","apiConfigInfo","actionHelper","require","authenticationSuccess","userInfo","type","AUTHENTICATE_SUCCESS","authenticationFailure","userFailure","AUTHENTICATE_FAILURE","authenticateAndFetchUserInfo","requestBody","userName","password","loginURL","url","options","getDataApiOptionsNotAuthenticated","method","clientName","fetchAndDispatch"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAO,KAAKC,YAAZ,MAA8B,yBAA9B;;AAEAC,OAAO,CAAC,kBAAD,CAAP;;AAEA,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAAyC;AAC9C,SAAO;AAAEC,IAAAA,IAAI,EAAEN,KAAK,CAACO,oBAAd;AAAoCF,IAAAA,QAAQ,EAARA;AAApC,GAAP;AACD;AAED,OAAO,SAASG,qBAAT,CAA+BC,WAA/B,EAA4C;AACjD,SAAO;AAAEH,IAAAA,IAAI,EAAEN,KAAK,CAACU,oBAAd;AAAoCD,IAAAA,WAAW,EAAXA;AAApC,GAAP;AACD,C,CAED;;AACA,OAAO,SAASE,4BAAT,CAAsCN,QAAtC,EAAgD;AACrD,MAAIO,WAAW,GAAG;AAChBC,IAAAA,QAAQ,EAAER,QAAQ,CAACQ,QADH;AAEhBC,IAAAA,QAAQ,EAAET,QAAQ,CAACS;AAFH,GAAlB;AAIA,MAAMC,QAAQ,aAAMd,aAAa,CAACe,GAApB,WAAd;AACA,MAAIC,OAAO,GAAGf,YAAY,CAACgB,iCAAb,CAA+C;AAAEC,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,UAAU,EAAEf,QAAQ,CAACe;AAAvC,GAA/C,EAAoGR,WAApG,CAAd;AACA,SAAOS,gBAAgB,CAACN,QAAD,EAAWE,OAAX,EAAoBZ,QAAQ,CAACe,UAA7B,CAAvB;AACD","sourcesContent":["import * as types from './actionTypes';\nimport apiConfigInfo from '../api/apiConfig'; \nimport * as actionHelper from '../utility/actionHelper'; \n\nrequire('isomorphic-fetch');\n\nexport function authenticationSuccess(userInfo) {\n  return { type: types.AUTHENTICATE_SUCCESS, userInfo };\n}\n\nexport function authenticationFailure(userFailure) {\n  return { type: types.AUTHENTICATE_FAILURE, userFailure }\n}\n \n//thunk\nexport function authenticateAndFetchUserInfo(userInfo) {\n  let requestBody = {\n    userName: userInfo.userName,\n    password: userInfo.password,\n  };\n  const loginURL = `${apiConfigInfo.url}Login/`;\n  let options = actionHelper.getDataApiOptionsNotAuthenticated({ method: \"POST\", clientName: userInfo.clientName }, requestBody);\n  return fetchAndDispatch(loginURL, options, userInfo.clientName);\n}\n"]},"metadata":{},"sourceType":"module"}