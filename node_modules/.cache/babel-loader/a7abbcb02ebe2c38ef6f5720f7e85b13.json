{"ast":null,"code":"import { isNullOrUndefined } from \"util\";\nimport { replaceNull, deleteKeysFromObject } from '../utility/generalFunctions';\n\nrequire('isomorphic-fetch');\n\nexport function getDataApiOptions(requestOptions, requestBody) {\n  var options = {\n    method: requestOptions.method,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + requestOptions.authToken\n    }\n  };\n\n  if (!isNullOrUndefined(requestBody)) {\n    options.body = JSON.stringify(requestBody);\n  }\n\n  return options;\n}\nexport var fetchData = function fetchData(url, options) {\n  var fetchRequest = new Request(url, options);\n  return fetch(fetchRequest).then(function (response) {\n    return response.json().then(function (result) {\n      return {\n        result: result\n      };\n    });\n  }).catch(function (error) {\n    return {\n      error: error\n    };\n  });\n};\nexport function fetchDataAndDispatch(url, options, dispatch, type, typeError) {\n  var fetchRequest = new Request(url, options);\n  return fetch(fetchRequest).then(function (response) {\n    return response.json().then(function (result) {\n      result.responseStatus.statusDescription === \"Success\" ? dispatch({\n        type: type,\n        payload: {\n          data: result.responseData[0],\n          error: null,\n          loaded: true\n        }\n      }) : dispatch({\n        type: type,\n        payload: {\n          data: null,\n          error: result.responseStatus,\n          loaded: true\n        }\n      });\n    });\n  }).catch(function (error) {\n    console.log(error);\n    dispatch({\n      type: type,\n      payload: {\n        data: null,\n        error: error.responseStatus ? error.responseStatus : {\n          errorMessage: [{\n            key: \"generic.error\",\n            message: \"Server is down\"\n          }],\n          \"httpStatusCode\": 500,\n          \"httpSubStatusCode\": 500,\n          \"statusDesc\": \"ServerFailure\"\n        },\n        loaded: true\n      }\n    });\n  });\n} // //TODO: account for multiple types in array\n// export function fetchDataAndDispatchWithPromise(url, options, dispatch, type, typeError) {\n//  try {\n//     const responseData = await this.fetchDataAndDispatch(url, options, dispatch, type);  \n//   }\n//   catch (err) { \n//   }\n//   return Promise.resolve();\n// };\n\n/**\n * returns object from clientconfig based on the key specified.\n * @param {object} configObject \n * @param {string} key \n */\n\nexport function getDataApiOptionsNotAuthenticated(requestOptions, requestBody) {\n  var options = {\n    method: requestOptions.method,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Client-Name': requestOptions.clientName\n    },\n    body: JSON.stringify(requestBody)\n  };\n  return options;\n}","map":{"version":3,"sources":["C:/Users/PIONEER/Documents/projects/endurance-sample/srabonti-sample-ui/src/utility/actionHelper.js"],"names":["isNullOrUndefined","replaceNull","deleteKeysFromObject","require","getDataApiOptions","requestOptions","requestBody","options","method","headers","authToken","body","JSON","stringify","fetchData","url","fetchRequest","Request","fetch","then","response","json","result","catch","error","fetchDataAndDispatch","dispatch","type","typeError","responseStatus","statusDescription","payload","data","responseData","loaded","console","log","errorMessage","key","message","getDataApiOptionsNotAuthenticated","clientName"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,MAAlC;AACA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,6BAAlD;;AACAC,OAAO,CAAC,kBAAD,CAAP;;AAGA,OAAO,SAASC,iBAAT,CAA2BC,cAA3B,EAA2CC,WAA3C,EAAwD;AAC7D,MAAIC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAEH,cAAc,CAACG,MADX;AAEZC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAiB,YAAYJ,cAAc,CAACK;AAHrC;AAFG,GAAd;;AAQA,MAAI,CAACV,iBAAiB,CAACM,WAAD,CAAtB,EAAqC;AACnCC,IAAAA,OAAO,CAACI,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeP,WAAf,CAAf;AACD;;AACD,SAAOC,OAAP;AACD;AAID,OAAO,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMR,OAAN,EAAkB;AACzC,MAAMS,YAAY,GAAG,IAAIC,OAAJ,CAAYF,GAAZ,EAAiBR,OAAjB,CAArB;AACA,SAAOW,KAAK,CAACF,YAAD,CAAL,CACJG,IADI,CACC,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAAAG,MAAM;AAAA,aAAK;AAAEA,QAAAA,MAAM,EAANA;AAAF,OAAL;AAAA,KAA3B,CAAJ;AAAA,GADT,EAEJC,KAFI,CAEE,UAAAC,KAAK;AAAA,WAAK;AAAEA,MAAAA,KAAK,EAALA;AAAF,KAAL;AAAA,GAFP,CAAP;AAGD,CALM;AAQP,OAAO,SAASC,oBAAT,CAA8BV,GAA9B,EAAmCR,OAAnC,EAA4CmB,QAA5C,EAAsDC,IAAtD,EAA4DC,SAA5D,EAAuE;AAC5E,MAAMZ,YAAY,GAAG,IAAIC,OAAJ,CAAYF,GAAZ,EAAiBR,OAAjB,CAArB;AACA,SAAOW,KAAK,CAACF,YAAD,CAAL,CACJG,IADI,CACC,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAAAG,MAAM,EAAI;AAC/CA,MAAAA,MAAM,CAACO,cAAP,CAAsBC,iBAAtB,KAA4C,SAA5C,GAAwDJ,QAAQ,CAC9D;AACEC,QAAAA,IAAI,EAAJA,IADF;AAEEI,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAGV,MAAM,CAACW,YAAP,CAAoB,CAApB,CADA;AAEPT,UAAAA,KAAK,EAAE,IAFA;AAGPU,UAAAA,MAAM,EAAE;AAHD;AAFX,OAD8D,CAAhE,GASIR,QAAQ,CAAC;AACTC,QAAAA,IAAI,EAAEA,IADG;AAETI,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,IADC;AAEPR,UAAAA,KAAK,EAAEF,MAAM,CAACO,cAFP;AAGPK,UAAAA,MAAM,EAAE;AAHD;AAFA,OAAD,CATZ;AAiBD,KAlBiB,CAAJ;AAAA,GADT,EAoBJX,KApBI,CAoBE,UAAAC,KAAK,EAAI;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACAE,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEA,IADC;AAEPI,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,IADC;AAEPR,QAAAA,KAAK,EAAEA,KAAK,CAACK,cAAN,GAAuBL,KAAK,CAACK,cAA7B,GAA8C;AACnDQ,UAAAA,YAAY,EAAE,CAAC;AACbC,YAAAA,GAAG,EAAE,eADQ;AAEbC,YAAAA,OAAO,EAAE;AAFI,WAAD,CADqC;AAKnD,4BAAkB,GALiC;AAMnD,+BAAqB,GAN8B;AAOnD,wBAAc;AAPqC,SAF9C;AAWPL,QAAAA,MAAM,EAAE;AAXD;AAFF,KAAD,CAAR;AAgBD,GAtCI,CAAP;AAuCD,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;;;AAQA,OAAO,SAASM,iCAAT,CAA2CnC,cAA3C,EAA2DC,WAA3D,EAAwE;AAC7E,MAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAEH,cAAc,CAACG,MADT;AAEdC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,qBAAeJ,cAAc,CAACoC;AAHvB,KAFK;AAOd9B,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,WAAf;AAPQ,GAAhB;AASA,SAAOC,OAAP;AACD","sourcesContent":["import { isNullOrUndefined } from \"util\";\nimport { replaceNull, deleteKeysFromObject } from '../utility/generalFunctions';\nrequire('isomorphic-fetch');\n\n\nexport function getDataApiOptions(requestOptions, requestBody) {\n  let options = {\n    method: requestOptions.method,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + requestOptions.authToken\n    }\n  }\n  if (!isNullOrUndefined(requestBody)) {\n    options.body = JSON.stringify(requestBody);\n  }\n  return options;\n}\n\n \n\nexport const fetchData = (url, options) => {\n  const fetchRequest = new Request(url, options);\n  return fetch(fetchRequest)\n    .then(response => response.json().then(result => ({ result })))\n    .catch(error => ({ error }));\n};\n\n\nexport function fetchDataAndDispatch(url, options, dispatch, type, typeError) {\n  const fetchRequest = new Request(url, options);\n  return fetch(fetchRequest)\n    .then(response => response.json().then(result => {\n      result.responseStatus.statusDescription === \"Success\" ? dispatch(\n        {\n          type,\n          payload: {\n            data: (result.responseData[0]),\n            error: null,\n            loaded: true\n          }\n        })\n        : dispatch({\n          type: type,\n          payload: {\n            data: null,\n            error: result.responseStatus,\n            loaded: true\n          }\n        });\n    }))\n    .catch(error => {\n      console.log(error)\n      dispatch({\n        type: type,\n        payload: {\n          data: null,\n          error: error.responseStatus ? error.responseStatus : {\n            errorMessage: [{\n              key: \"generic.error\",\n              message: \"Server is down\"\n            }],\n            \"httpStatusCode\": 500,\n            \"httpSubStatusCode\": 500,\n            \"statusDesc\": \"ServerFailure\"\n          },\n          loaded: true\n        }\n      })\n    });\n}\n\n\n// //TODO: account for multiple types in array\n// export function fetchDataAndDispatchWithPromise(url, options, dispatch, type, typeError) {\n//  try {\n//     const responseData = await this.fetchDataAndDispatch(url, options, dispatch, type);  \n//   }\n//   catch (err) { \n//   }\n//   return Promise.resolve();\n// };\n\n\n/**\n * returns object from clientconfig based on the key specified.\n * @param {object} configObject \n * @param {string} key \n */\n\n  \n\nexport function getDataApiOptionsNotAuthenticated(requestOptions, requestBody) {\n  const options = {\n    method: requestOptions.method,\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Client-Name': requestOptions.clientName\n    },\n    body: JSON.stringify(requestBody)\n  }\n  return options;\n} "]},"metadata":{},"sourceType":"module"}